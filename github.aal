# preview-show-vars: state, approved
aal "github" {
    language "python" {
        import os
        from git_adapter import *

        #class PRState(Enum):
        #    None    = 0
        #    Draft   = 1
        #    Open    = 2
        #    Closed  = 3
        #    Merged  = 4

    }

    variables { state, approved, SUT }
    initial_state {
        state = 0#PRState.None
        approved = False
    }
    adapter_init {
        log("Start")
        SUT=GithubPR("Kokan/github-fmbt")
    }
    adapter_exit {
        if verdict == "pass":
           log("PASS")
        log("cleaning up ")
    }
    input "Open new PR" {
        guard()   { return (state == 0) or (state == 3) or (state == 4) } #PRState.None
        adapter() {
                    log("Create PR {}".format(SUT.OpenNewPR()))
                  }
        body()    {
                    state = 2# PRState.Open
                    approved = False
                  }
    }
    input "Merge PR" {
        guard()   { return ((state == 2) and approved) } #PRState.Open }
        adapter() {
                    log("Merge PR")
                    SUT.MergePR()
                  }
        body()    { state = 4 } #PRState.Merged }
    }
    input "Close PR" {
        guard()   { return state == 2 } #PRState.Open
        adapter() {
                    log("Close PR")
                    SUT.ClosePR()
                  }
        body()    { state = 3 } #PRState.Closed }
    }
    input "Reopen PR" {
        guard()   { return state == 3 } #PRState.Closed
        adapter() {
                    log("Reopen PR")
                    SUT.ReopenPR()
                  }
        body()    { state = 2 } #PRState.Open }
    }
    input "Change PR to Draft" {
        guard()   { return state == 2 } #PRState.Open }
        adapter() {
                    log("Change PR to Draft")
                    SUT.Open2Draft()
                  }
        body()    { state = 1 } #PRState.Draft }
    }
    input "Change PR to Open" {
        guard()   { return state == 1 } #PRState.Draft }
        adapter() {
                    log("Change PR to Open")
                    SUT.Draft2Open()
                  }
        body()    { state = 2 } # PRState.Open }
    }
    input "Approve" {
        guard()   { return state == 2 } #PRState.Open }
        adapter() {
                    log("Approve")
                    SUT.Approve()
                  }
        body()    { approved = True }
    }
    input "Change request" {
        guard()   { return state == 2 } #PRState.Open }
        adapter() {
                    log("Change request")
                    SUT.ChangeRequest()
                  }
        body()    { approved = False }
    }

    tag "Open" {
        guard()   { return (state == 2) and (not approved) } #PRState.Open }
        adapter() { assert SUT.GetPRStatus() == 2  } # code here that checks github has open PR
    }
    tag "Ready to merge" {
        guard()   { return (approved and (state == 2)) } #PRState.Open }
        adapter() { assert SUT.isReady2Merge()  } # code here that checks github has open PR
    }
    tag "Closed" {
        guard()   { return state == 3 } #PRState.Closed }
        adapter() { assert SUT.GetPRStatus() == 3  } # code here that checks github has open PR
    }
    tag "Merged" {
        guard()   { return state == 4 } # PRState.Merged }
        adapter() { assert SUT.GetPRStatus() == 4 } # code here that checks github has open PR
    }
    tag "Draft" {
        guard()   { return state == 1 } #PRState.Draft }
        adapter() { assert SUT.GetPRStatus() == 1  } # code here that checks github has open PR
    }
}
