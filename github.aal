# preview-show-vars: state, approved
aal "github" {
    language "python" {
        import os
        from git_adapter import *
    }
    variables { state, approved, SUT }
    initial_state {
        state = PRState.NONE
        approved = 0
    }
    adapter_init {
        log("Start")
        SUT=GithubPR("Kokan/github-fmbt")
    }
    adapter_exit {
        if verdict == "pass":
           log("PASS")
        log("cleaning up ")
    }
    input "Open new PR" {
        guard()   { return (state in [PRState.NONE, PRState.CLOSED, PRState.MERGED]) }
        adapter() {
                    prid = SUT.OpenNewPR()
                    log("Create PR {}".format(p))
                  }
        body()    {
                    state = PRState.OPEN
                    approved = 0
                  }
    }
    input "Merge PR" {
        guard()   { return ((state == PRState.OPEN) and (approved>0)) }
        adapter() {
                    log("Merge PR")
                    SUT.MergePR()
                  }
        body()    { state = PRState.MERGED }
    }
    input "Close PR" {
        guard()   { return state == PRState.OPEN }
        adapter() {
                    log("Close PR")
                    SUT.ClosePR()
                  }
        body()    { state = PRState.CLOSED }
    }
    input "Reopen PR" {
        guard()   { return state == PRState.CLOSED }
        adapter() {
                    log("Reopen PR")
                    SUT.ReopenPR()
                  }
        body()    { state = PRState.OPEN }
    }
    input "Change PR to Draft" {
        guard()   { return state == PRState.OPEN }
        adapter() {
                    log("Change PR to Draft")
                    SUT.Open2Draft()
                  }
        body()    { state = PRState.DRAFT }
    }
    input "Change PR to Open" {
        guard()   { return state == PRState.DRAFT }
        adapter() {
                    log("Change PR to Open")
                    SUT.Draft2Open()
                  }
        body()    { state = PRState.OPEN }
    }
    input "Approve" {
        guard()   { return state == PRState.OPEN or state == PRState.DRAFT }
        adapter() {
                    log("Approve")
                    SUT.Approve()
                  }
        body()    { approved = min(1,approved+1) }
    }
    input "Change request" {
        guard()   { return state == PRState.OPEN }
        adapter() {
                    log("Change request")
                    SUT.ChangeRequest()
                  }
        body()    { approved = 0 }
    }

    tag "Open" {
        guard()   { return (state == PRState.OPEN) and (0 == approved) }
        adapter() { assert SUT.GetPRStatus() == PRState.OPEN }
    }
    tag "Ready to merge" {
        guard()   { return ((approved>0) and (state == PRState.OPEN)) }
        adapter() { assert SUT.isReady2Merge() }
    }
    tag "Closed" {
        guard()   { return state == PRState.CLOSED }
        adapter() { assert SUT.GetPRStatus() == PRState.CLOSED }
    }
    tag "Merged" {
        guard()   { return state == PRState.MERGED }
        adapter() { assert SUT.GetPRStatus() == PRState.MERGED }
    }
    tag "Draft" {
        guard()   { return state == PRState.DRAFT }
        adapter() { assert SUT.GetPRStatus() == PRState.DRAFT }
    }
}
